== Dateable Behavior ==

This Behavior is using the li3_behaviors library of the flexible and most RAD development framework for PHP 5.3+ Lithium

See:
* [[http://rad-dev.org/lithium/]]
* [[http://rad-dev.org/li3_behaviors/]]

This dateable behavior automatically adds two new attributes to your model: __created__ and __updated__
The attributes are customizable in name and format. And will be added/modified via Filters.
We've chosen ''create'' & ''update'' because of '''CRUD'''

=== Usage: ===

This Library is using the li3_behaviors library. It will load the li3_behaviors Lib automatically.
So activating the li3_behaviors in your bootstrap is optionally.


==== Bootstrap ====
Excerpt of:
app/config/bootstrap/libraries.php

É
Libraries::add('li3_behaviors');
Libraries::add('li3_dateable');
É


==== Model ====
According to the li3_behaviors lib, your model must be a child class of:

\li3_behaviors\extensions\Model


Example:

class Foo extends \li3_behaviors\extensions\Model {
	protected $_meta = array('key' => '_id');

	protected $_actsAs = array(
		'Dateable'
	);
}

thats it :)

Now your Model is using the dateable behavior.


=== Info ===

As mentioned above, this behavior is using the lithium Filter-Rules:

# '''create''' every time you create a new Entity via: Model::create(), the attributes '''created''' & '''updated''' will be filled like that: ''Y-m-d h:i:s''
# '''update''' on every update, only the attribute '''update''' will be filled with these datetime format: ''Y-m-d h:i:s''

=== Future ===

# callable time format via Callbacks?
# better test coverage
# finder methods for range queries etc.
# dateable for nested objects (far future)